apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: elasticsearch
  namespace: nexus18-research
spec:
  serviceAccountName: nexus-svc-account
  releaseName: elasticsearch
  chart:
    spec:
      chart: elasticsearch
      sourceRef:
        kind: HelmRepository
        name: elastic
        namespace: nexus18-research
      version: 7.17.1
  interval: 1h0m0s
  install:
    remediation:
      retries: 3
    # adeel adding disablewait sections for debugging
    # touch x2
    # touch
    disableWait: true
  upgrade:
    disableWait: true
  # Default values
  # https://github.com/elastic/helm-charts/blob/master/elasticsearch/values.yaml
  values:
    clusterName: "elasticsearch"
    nodeGroup: "master"

    # The service that non master groups will try to connect to when joining the cluster
    # This should be set to clusterName + "-" + nodeGroup for your master group
    # original # masterService: ""
    masterService: "elasticsearch"

    # Elasticsearch roles that will be applied to this nodeGroup
    # These will be set as environment variables. E.g. node.master=true
    roles:
      master: "true"
      ingest: "true"
      data: "true"
      remote_cluster_client: "true"
      ml: "true"

    replicas: 3
    minimumMasterNodes: 2

    esMajorVersion: ""

    clusterDeprecationIndexing: "false"

    # Allows you to add any config files in /usr/share/elasticsearch/config/
    # such as elasticsearch.yml and log4j2.properties
    # original # esConfig: {}
    esConfig:
      elasticsearch.yml: |
        cluster.name: "elasticsearch"
        network.host: 0.0.0.0
        cluster.max_shards_per_node: 2000
    #  elasticsearch.yml: |
    #    key:
    #      nestedkey: value
    #  log4j2.properties: |
    #    key = value

    esJvmOptions: {}
    #  processors.options: |
    #    -XX:ActiveProcessorCount=3

    # Extra environment variables to append to this nodeGroup
    # This will be appended to the current 'env:' key. You can use any of the kubernetes env
    # syntax here
    # original # extraEnvs: []
    extraEnvs:
      - name: ingest.geoip.downloader.enabled
        value: "false"
      # - name: path.repo
      #   value: "/mnt/snapshots"
      - name: xpack.security.enabled
        value: "true"
      # Node-to-node (transport) settings
      - name: xpack.security.transport.ssl.enabled
        value: "true"
      - name: xpack.security.transport.ssl.client_authentication
        value: "optional"
      - name: xpack.security.transport.ssl.verification_mode
        value: "certificate"
      - name: xpack.security.transport.ssl.key
        value: "/usr/share/elasticsearch/config/ssl/elasticsearch.key"
      - name: xpack.security.transport.ssl.certificate
        value: "/usr/share/elasticsearch/config/ssl/elasticsearch.crt"
      - name: xpack.security.transport.ssl.certificate_authorities
        value: "/usr/share/elasticsearch/config/ssl/ca.crt"
      # SSL settings
      - name: xpack.security.http.ssl.enabled
        value: "true"
      - name: xpack.security.http.ssl.key
        value: "/usr/share/elasticsearch/config/ssl/elasticsearch.key"
      - name: xpack.security.http.ssl.certificate
        value: "/usr/share/elasticsearch/config/ssl/elasticsearch.crt"
      - name: xpack.security.http.ssl.certificate_authorities
        value: "/usr/share/elasticsearch/config/ssl/ca.crt"
      # Anonymous health_check necessary for the readinessprobe to work
      - name: xpack.security.authc.anonymous.username
        value: "anonymous"
      - name: xpack.security.authc.anonymous.roles
        value: "health_check"
      - name: xpack.security.authc.anonymous.authz_exception
        value: "true"
      - name: ELASTIC_USERNAME
        valueFrom:
          secretKeyRef:
            name: elasticsearch
            key: username
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch
            key: password

    # Allows you to load environment variables from kubernetes secret or config map
    envFrom: []
    # - secretRef:
    #     name: env-secret
    # - configMapRef:
    #     name: config-map

    # A list of secrets and their paths to mount inside the pod
    # This is useful for mounting certificates for security and for mounting
    # the X-Pack license
    secretMounts:
      []
      # - name: elastic-certificates
      #   secretName: my-ca-cert
      #   path: /usr/share/elasticsearch/config/certs

    hostAliases: []
    #- ip: "127.0.0.1"
    #  hostnames:
    #  - "foo.local"
    #  - "bar.local"

    image: "docker.elastic.co/elasticsearch/elasticsearch"
    imageTag: "7.17.1"
    imagePullPolicy: "IfNotPresent"

    podAnnotations:
      {}
      # iam.amazonaws.com/role: es-cluster

    # additionals labels
    labels: {}

    # original # esJavaOpts: "" # example: "-Xmx1g -Xms1g"
    # adeel esJavaOpts: "-Xms8G -Xmx8G"
    # adeel - copying jvm settings from cassandra
    esJavaOpts: "-Xms4G -Xmx4G"

    # original # resources:
    # original #   requests:
    # original #     cpu: "1000m"
    # original #     memory: "2Gi"
    # original #   limits:
    # original #     cpu: "1000m"
    # original #     memory: "2Gi"
    resources:
      requests:
        cpu: "500m"
        memory: "6Gi"
      limits:
        cpu: "500m"
        memory: "8Gi"

    # original # initResources: {}
    # limits:
    #   cpu: "25m"
    #   # memory: "128Mi"
    # requests:
    #   cpu: "25m"
    #   memory: "128Mi"
    initResources:
      requests:
        cpu: "500m"
        memory: "6Gi"
      limits:
        cpu: "500m"
        memory: "8Gi"

    networkHost: "0.0.0.0"

    volumeClaimTemplate:
      # original # accessModes: ["ReadWriteOnce"]
      accessModes: ["ReadWriteOnce"]
      storageClassName: "vmware-sc"
      resources:
        requests:
          # original #  storage: 30Gi
          storage: 500Gi

    rbac:
      create: false
      serviceAccountAnnotations: {}
      serviceAccountName: ""
      automountToken: true

    podSecurityPolicy:
      create: false
      name: ""
      spec:
        privileged: true
        fsGroup:
          rule: RunAsAny
        runAsUser:
          rule: RunAsAny
        seLinux:
          rule: RunAsAny
        supplementalGroups:
          rule: RunAsAny
        volumes:
          - secret
          - configMap
          - persistentVolumeClaim
          - emptyDir

    persistence:
      enabled: true
      labels:
        # Add default labels for the volumeClaimTemplate of the StatefulSet
        enabled: false
      annotations: {}

    # adeel
    #extraVolumes: []

    # original # extraVolumes: []
    # - name: extras
    #   emptyDir: {}
    extraVolumes:
      # - name: backups-elasticsearch
      #   persistentVolumeClaim:
      #     claimName: backups-elasticsearch
      - name: rbac
        configMap:
          name: elasticsearch-rbac
          items:
            - key: users_roles
              path: users_roles
            - key: roles.yml
              path: roles.yml
      - name: users
        secret:
          secretName: elasticsearch-users
      - name: tls
        secret:
          secretName: elasticsearch-tls
          items:
            - key: elasticsearch.crt
              path: elasticsearch.crt
            - key: elasticsearch.key
              path: elasticsearch.key
            - key: ca.crt
              path: ca.crt

    # original # extraVolumeMounts: []
    #extraVolumeMounts: []
    # - name: extras
    #   mountPath: /usr/share/extras
    #   readOnly: true
    extraVolumeMounts:
      # - name: backups-elasticsearch
      #   mountPath: /mnt/snapshots
      #   readOnly: false
      - name: rbac
        mountPath: /usr/share/elasticsearch/config/roles.yml
        subPath: roles.yml
      - name: rbac
        mountPath: /usr/share/elasticsearch/config/users_roles
        subPath: users_roles
      - name: users
        mountPath: /usr/share/elasticsearch/config/users
        subPath: users
      - name: tls
        mountPath: /usr/share/elasticsearch/config/ssl

    extraContainers:
      []
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']

    # adeel adding
    # original
    # extraInitContainers:
    #   []
    extraInitContainers:
      - name: set-vm-max
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "sysctl -w vm.max_map_count=262144"]
        securityContext:
          privileged: true
          runAsUser: 0

    # This is the PriorityClass settings as defined in
    # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
    priorityClassName: ""

    # By default this will make sure two pods don't end up on the same node
    # Changing this to a region would allow you to spread pods across regions
    antiAffinityTopologyKey: "kubernetes.io/hostname"

    # Hard means that by default pods will only be scheduled if there are enough nodes for them
    # and that they will never end up on the same node. Setting this to soft will do this "best effort"
    # Adeel change
    #antiAffinity: "hard"
    antiAffinity: "hard"

    # This is the node affinity settings as defined in
    # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
    nodeAffinity: {}

    # The default is to deploy all pods serially. By setting this to parallel all pods are started at
    # the same time when bootstrapping the cluster
    podManagementPolicy: "Parallel"

    # The environment variables injected by service links are not used, but can lead to slow Elasticsearch boot times when
    # there are many services in the current namespace.
    # If you experience slow pod startups you probably want to set this to `false`.
    enableServiceLinks: true

    # original # protocol: http
    protocol: https

    httpPort: 9200
    transportPort: 9300

    service:
      enabled: true
      labels: {}
      labelsHeadless: {}
      type: ClusterIP
      # Consider that all endpoints are considered "ready" even if the Pods themselves are not
      # https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec
      publishNotReadyAddresses: false
      nodePort: ""
      annotations: {}
      httpPortName: http
      transportPortName: transport
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: ""

    updateStrategy: RollingUpdate

    # This is the max unavailable setting for the pod disruption budget
    # The default value of 1 will make sure that kubernetes won't allow more than 1
    # of your pods to be unavailable during maintenance
    maxUnavailable: 1

    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000

    securityContext:
      capabilities:
        drop:
          - ALL
      # readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000

    # How long to wait for elasticsearch to stop gracefully
    terminationGracePeriod: 120

    # adeel edit to match system
    sysctlVmMaxMapCount: 131072

    # Adeel Updating
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 3
      timeoutSeconds: 5

    # https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-health.html#request-params wait_for_status
    # original # clusterHealthCheckParams: "wait_for_status=green&timeout=1s"
    clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"

    ## Use an alternate scheduler.
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""

    imagePullSecrets: []
    nodeSelector: {}
    tolerations: []

    # Enabling this will publicly expose your Elasticsearch instance.
    # Only enable this if you have security enabled on your cluster
    ingress:
      # original # enabled: false
      enabled: true
      #className: "nginx"
      # original # annotations: {}
      annotations:
        #kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        # adeel - need to enable to ask for username/pw;  will need a secret file
        # nginx.ingress.kubernetes.io/ssl-redirect: "true"
        # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        # nginx.ingress.kubernetes.io/auth-type: basic
        # nginx.ingress.kubernetes.io/auth-secret: basic-auth
        # nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"

      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      #className: "nginx"
      pathtype: ImplementationSpecific
      hosts:
        - host: nexus.camh.ca
          paths:
            - path: /elasticsearch(/|$)(.*)
              pathType: Prefix
      tls:
        - secretName: wc.camh.ca
          hosts:
            - nexus.camh.ca

    # original # nameOverride: ""
    # original # fullnameOverride: ""
    nameOverride: "elasticsearch"
    fullnameOverride: "elasticsearch"
    healthNameOverride: ""

    sysctlInitContainer:
      enabled: false
      # original #  enabled: true

    tests:
      enabled: true
